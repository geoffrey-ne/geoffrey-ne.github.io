(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{356:function(t,_,v){t.exports=v.p+"assets/img/https.0ac3917b.png"},378:function(t,_,v){"use strict";v.r(_);var a=v(45),s=Object(a.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"计算机网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络"}},[t._v("#")]),t._v(" 计算机网络")]),t._v(" "),a("h2",{attrs:{id:"_1-tcp-和-udp-的区别和特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-和-udp-的区别和特点"}},[t._v("#")]),t._v(" 1. TCP 和 UDP 的区别和特点")]),t._v(" "),a("h3",{attrs:{id:"用户数据报协议-udp-user-datagram-protocol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户数据报协议-udp-user-datagram-protocol"}},[t._v("#")]),t._v(" 用户数据报协议 UDP（User Datagram Protocol）")]),t._v(" "),a("p",[t._v("是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。")]),t._v(" "),a("h3",{attrs:{id:"传输控制协议-tcp-transmission-control-protocol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传输控制协议-tcp-transmission-control-protocol"}},[t._v("#")]),t._v(" 传输控制协议 TCP（Transmission Control Protocol）")]),t._v(" "),a("p",[t._v("是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。")]),t._v(" "),a("h2",{attrs:{id:"_2-三次握手-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-三次握手-四次挥手"}},[t._v("#")]),t._v(" 2. 三次握手，四次挥手")]),t._v(" "),a("p",[t._v("TCP 是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。")]),t._v(" "),a("ul",[a("li",[t._v("三次握手用于建立连接；")]),t._v(" "),a("li",[t._v("四次挥手用于关闭连接；")])]),t._v(" "),a("h3",{attrs:{id:"三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),a("ul",[a("li",[t._v("客户端发送 SYN=1,ACK=0 的包，初始序号为 x；")]),t._v(" "),a("li",[t._v("服务端发送 SYN=1,ACK=1 的包，确认号为 x+1，服务器端初始序号为 y；")]),t._v(" "),a("li",[t._v("客户端收到确认报文后，再向服务端发送确认，确认号为 y+1，序号为 x+1。")])]),t._v(" "),a("p",[t._v("如果两次握手，比如客户端发送建立连接请求，服务端接收请求就建立连接，那么当网络堵塞导致客户端重新发送时，服务端可能会建立多个无效链接。")]),t._v(" "),a("h3",{attrs:{id:"四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),a("p",[t._v("四次挥手可以分为两个部分，每个部分包含两次挥手，表示一个方向的连接断开。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("客户端断开连接")]),t._v(" "),a("ul",[a("li",[t._v("客户端发送包含 FIN 的网络包，和自己当前的序号 K，服务端收到；")]),t._v(" "),a("li",[t._v("服务端发送包含 ACK 的网络包（K + 1 作为 ACK 的值，这里出现 close-wait），客户端收到，此时这个方向上的连接关闭。")])])]),t._v(" "),a("li",[a("p",[t._v("服务端断开连接：")]),t._v(" "),a("ul",[a("li",[t._v("服务端发送包含 FIN 的网络包，客户端收到；")]),t._v(" "),a("li",[t._v("客户端发送包含 ACK 的网络包（time-wait 开始计时），服务端收到，此时这个方向上的连接关闭。")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-http-与-https-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-与-https-区别"}},[t._v("#")]),t._v(" 3. HTTP 与 HTTPS 区别")]),t._v(" "),a("p",[t._v("HTTP 传输是明文的，容易被劫持。HTTPS 解决数据传输安全问题，比 http 多了一层加密算法(ssl/tls)。")]),t._v(" "),a("p",[t._v("https 加密使用混合加密算法，先使用非对称加密获取通信秘钥，再使用对称加密传输内容。")]),t._v(" "),a("p",[t._v("https 具体流程如下：")]),t._v(" "),a("ul",[a("li",[t._v("首先客户端向服务器端发起握手请求，包含客户端支持的 tls 版本及密码组合；")]),t._v(" "),a("li",[t._v("服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端；")]),t._v(" "),a("li",[t._v("客户端的服务器开始协商 SSL 连接的安全等级，也就是信息加密的等级；")]),t._v(" "),a("li",[t._v("客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站；")]),t._v(" "),a("li",[t._v("服务器利用自己的私钥解密出会话密钥。服务器利用会话密钥加密与客户端之间的通信（对称加密）。")])]),t._v(" "),a("p",[a("img",{attrs:{src:v(356),alt:"https加密流程"}})]),t._v(" "),a("p",[t._v("https 缺点：")]),t._v(" "),a("ul",[a("li",[t._v("申请证书需要钱，功能越强大的证书费用越高；")]),t._v(" "),a("li",[t._v("HTTPS 协议多次握手，导致页面的加载时间延长。")]),t._v(" "),a("li",[t._v("加密解密算法会消耗 CPU 资源，对服务器资源消耗较大。")])]),t._v(" "),a("h3",{attrs:{id:"https-只用非对称加密可不可以"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https-只用非对称加密可不可以"}},[t._v("#")]),t._v(" HTTPS 只用非对称加密可不可以")]),t._v(" "),a("p",[t._v("不可以")]),t._v(" "),a("ul",[a("li",[t._v("非对称加密的加解密效率是非常低的，而 http 的应用场景中通常端与端之间存在大量的交互，非对称加密的效率是无法接受的；")]),t._v(" "),a("li",[t._v("在 HTTPS 的场景中只有服务端保存了私钥，一对公私钥只能实现单向的加解密，所以 HTTPS 中内容传输加密采取的是对称加密，而不是非对称加密；")])])])}),[],!1,null,null,null);_.default=s.exports}}]);